<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sultry Thoughts on Sultry Thoughts</title>
    <link>https://kbogas.github.io/</link>
    <description>Recent content in Sultry Thoughts on Sultry Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0300</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Coin Change</title>
      <link>https://kbogas.github.io/post/coin_change/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/post/coin_change/</guid>
      <description>

&lt;h1 id=&#34;coin-changing-knapsack-problem&#34;&gt;Coin-changing (Knapsack problem)&lt;/h1&gt;

&lt;p&gt;So a friend of mine was interviewing for a semi-software focused position which had also a time-restricted technical test.&lt;/p&gt;

&lt;p&gt;One of the questions asked was something along these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A vending machine has been recently installed on your work floor!
Unfortunately, there is a limit on the number of bills it can hold, so the technicians would like a way to give out the minimum amount of change in bills needed.
So, your task is the following:
Write a program that given an initial amount of money (the change to be returned), find the minimum number of bills (of certain denominations) that add up to it.
Our machine can give back only bills of 1,2,5 and 10$!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pretty straightforward problem that many CS students have already seen during their Algorithms101 or CS101 classes.&lt;/p&gt;

&lt;p&gt;It was also  featured in xkcd:
&lt;img src=&#34;https://imgs.xkcd.com/comics/np_complete.png&#34; alt=&#34;Xkcd Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This problem is essentially a variation of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Knapsack_problem&#34; target=&#34;_blank&#34;&gt;Knapsack Problem&lt;/a&gt;. This is a more &lt;a href=&#34;https://en.wikipedia.org/wiki/Change-making_problem&#34; target=&#34;_blank&#34;&gt;relevant lemma&lt;/a&gt; but there is an unlimited amount of blogs, posts etc on this matter and I won&amp;rsquo;t delve much on the technical details.&lt;/p&gt;

&lt;p&gt;As we were discussing it, I was trying to come up with a fast solution. Although I knew that Dynamic Programming was the way to go with this problem, my skills regarding classical CS and algos are a bit rusty, so it would take me some time to remember the inner-workings of the approach..&lt;/p&gt;

&lt;p&gt;(Note to self: Head over to &lt;a href=&#34;https://www.geeksforgeeks.org/dynamic-programming/&#34; target=&#34;_blank&#34;&gt;GFG&lt;/a&gt; to stretch out!)&lt;/p&gt;

&lt;h3 id=&#34;solved-as-an-integer-programming-problem&#34;&gt;Solved as an integer programming problem&lt;/h3&gt;

&lt;p&gt;Thus, I opted for an optimization approach. As, we would like to minimize the number of bills given back, the obvious choice would be an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_programming&#34; target=&#34;_blank&#34;&gt;Integer Programming&lt;/a&gt; approach, as the count of each denomination will be &lt;em&gt;non-negative integers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$w \in \mathbb{Z}^N$, be the array with the $N$ available denominations&lt;/li&gt;
&lt;li&gt;$X \in \mathbb{Z}^N$, be the count of each denomination returned&lt;/li&gt;
&lt;li&gt;$C \in \mathbb{Z}$, be the wanted amount of cash to be returned&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem formulation would be :&lt;/p&gt;

&lt;p&gt;$$ min\sum{X}$$&lt;/p&gt;

&lt;p&gt;with the restraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$x \geq 0, \forall x \in X$ (we need a non-negative amount of each denomination)&lt;/li&gt;
&lt;li&gt;$Χ\cdot w^Τ = C$ (they must sum up to the needed cash)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it. We have formulated the problems and the constraints and we just need the appropriate solver to run the procedure. For my approach python 3 is used.&lt;/p&gt;

&lt;p&gt;We will rely on the &lt;a href=&#34;https://cvxopt.org/&#34; target=&#34;_blank&#34;&gt;cvxopt&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;We will also need the GLPK_MI package for the solver, as the ECOS_BB is not working correctly.
Check out &lt;a href=&#34;https://www.cvxpy.org/install/index.html&#34; target=&#34;_blank&#34;&gt;the docs on how to do so&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def solve_with_ip(denominations, CASH):
    &amp;quot;&amp;quot;&amp;quot;
    Input:
     - denominations: iterable,
       a list/array/iterable with the available integer denominations
     - CASH: int,
       the needed amount of cash
    Output:
        - if the minimization is feasible, a dictionary is returned with
          keys each denomination and values their corresponding count
    &amp;quot;&amp;quot;&amp;quot;
    import cvxpy as cp
    # The available coin denominations e.g. a 2-dollar bill, a 5-dollar bill and a 10-dollar bill.
    w = cp.Constant(denominations)

    # The initial cash to be changed
    CASH = cp.Constant(CASH)

    # Variables containing the number of the coins to be returned for each denominator
    # The size of this must be equal to the denominations w
    x = cp.Variable((1, w.shape[0]), integer=True)

    # We want to minimize the total number of coins returned
    objective = cp.Minimize(cp.sum(x))



    # The constraints
    constraints = [
        w@x.T == CASH, #
        x&amp;gt;=0 # semi-positive coins
    ]
    # Form and solve problem.
    prob = cp.Problem(objective, constraints)
    # Need the GLPK_MI solver because the ECOS_BB is not working correctly.
    prob.solve(solver = &#39;GLPK_MI&#39;) # Returns the optimal value.
    if prob.status == &#39;infeasible&#39;:
        print(&amp;quot;Can&#39;t change %s with denominations: %s&amp;quot;%(CASH.__str__(), w.__str__()))
        return -1
    else:
        #return
        print(&amp;quot;Initial cash %s  is changed into %d coins as follows:&amp;quot;%(CASH.__str__(), prob.value))
        res = dict(zip([w_ for w_ in w.value], x.value.flatten()))
        print(res)
        return res

denominations = [1, 2, 5, 10]
CASH = 100
_ = solve_with_ip(denominations, CASH)


&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;competition&#34;&gt;Competition&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s see how it plays out against two simple strategies found on &lt;a href=&#34;https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/&#34; target=&#34;_blank&#34;&gt;GeeksforGeeks&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys

def solve_with_greedy(denominations, CASH):
    &amp;quot;&amp;quot;&amp;quot;
    Greedy approach
    !! THIS APPROACH DOES NOT RETURN CORRECT RESULTS
    !! FOR EXAMPLE IF WE HAVE denominations [2,5,10]
    !! AND WE ASK FOR CASH = 6 THE RESULT WOULD BE
    !! ONE 5 BILL AND NOTHING ELSE
    &amp;quot;&amp;quot;&amp;quot;
    n = len(denominations)
    # Initialize Result
    ans = []
    # Traverse through all denomination
    i = n - 1
    while(i &amp;gt;= 0):
        # Find denominations
        while (CASH &amp;gt;= denominations[i]):
            CASH -= denominations[i]
            ans.append(denominations[i])
        i -= 1
    return ans

def solve_with_re(denominations, CASH):
    &amp;quot;&amp;quot;&amp;quot;
    Recursive approach
    &amp;quot;&amp;quot;&amp;quot;
    m = len(denominations)
    # base case
    if (CASH == 0):
        return 0
    # Initialize result
    res = sys.maxsize
    # Try every coin that has smaller value than V
    for i in range(0, m):
        if (denominations[i] &amp;lt;= CASH):
            sub_res = solve_with_re(denominations, CASH - denominations[i])
            # Check for INT_MAX to avoid overflow and see if
            # result can minimized
            if (sub_res != sys.maxsize and sub_res + 1 &amp;lt; res):
                res = sub_res + 1
    return res

def solve_with_dp(denominations, CASH):
    &amp;quot;&amp;quot;&amp;quot;
    DP_approach
    &amp;quot;&amp;quot;&amp;quot;
    m = len(denominations)
    # table[i] will be storing the minimum
    # number of coins required for i value.
    # So table[V] will have result
    table = [0 for i in range(CASH + 1)]
    # Base case (If given value V is 0)
    table[0] = 0
    # Initialize all table values as Infinite
    for i in range(1, CASH + 1):
        table[i] = sys.maxsize
    # Compute minimum coins required
    # for all values from 1 to V
    for i in range(1, CASH + 1):

        # Go through all coins smaller than i
        for j in range(m):
            if (denominations[j] &amp;lt;= i):
                sub_res = table[i - denominations[j]]
                if (sub_res != sys.maxsize and
                    sub_res + 1 &amp;lt; table[i]):
                    table[i] = sub_res + 1
    return table[CASH]

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(solve_with_re(denominations, 15))
print(solve_with_greedy(denominations, 15))
print(solve_with_dp(denominations, 15))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so everything is working as it should. Let&amp;rsquo;s run a test-suite and see how this goes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from time import time
import numpy as np
methods_names = [&amp;quot;IP&amp;quot;, &amp;quot;DP&amp;quot;, &amp;quot;RE&amp;quot;]
methods = [solve_with_ip, solve_with_dp, solve_with_re]
test_instances = [1, 10, 51, 101, 501, 1001] #np.random.randint(11, 10000, size=10000)
denominations = [1, 2, 5, 10]
logs = []
for name, method in zip(methods_names, methods):
    t_s1 = time()
    for CASH in test_instances:
        t_s = time()
        _ = method(denominations, CASH)
        logs.append({&amp;quot;Method&amp;quot;:name, &amp;quot;Test&amp;quot;:CASH, &amp;quot;Time&amp;quot;:time()-t_s})
    print(&amp;quot;%s finished all tests in %0.2f seconds!&amp;quot;%(name, time()-t_s1))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns;
import matplotlib.pyplot as plt
import matplotlib
%matplotlib inline
df = pd.DataFrame(logs)
fig = plt.figure(figsize=(16,5))
SMALL_SIZE = 18
matplotlib.rc(&#39;font&#39;, size=SMALL_SIZE)
matplotlib.rc(&#39;axes&#39;, titlesize=SMALL_SIZE)

sns.lineplot(x=&#39;Test&#39;, y=&#39;Time&#39;, hue=&#39;Method&#39;, data=df)
plt.xlabel(&amp;quot;Cash to be returned&amp;quot;)
plt.title(&amp;quot;Comparison of Different Methods&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well as expected the &lt;em&gt;RE&lt;/em&gt; method is by far the slowest one. In fact it was so slow, I had to interrupt it from running for all test cases. So, we won&amp;rsquo;t focus on this one.&lt;/p&gt;

&lt;p&gt;Regarding the two main-contenders, we can see than the &lt;em&gt;DP&lt;/em&gt; one seems to be faster and not affected by the amount of cash to be returned. We can see a hint of linear dependence to the cash to be returned but this is more of a guess/intuition rather than an insight gained from the graph.&lt;/p&gt;

&lt;p&gt;This is somewhat expected as &lt;u&gt;Dynamic Programming works well when the states table is small&lt;/u&gt;. This happens because the states that have to be visited are small in number and it can be easy to navigate through them to find the optimal solution.&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;em&gt;IP&lt;/em&gt; method seems to take up some time for the initial small values, but then the time needed seems constant regardless of the value cash returned. However, this constant plateau is still worse than the time needed for the &lt;em&gt;DP&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;But what happens, when we change the scale of things?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run another experiment with much larger values and evaluate the results of the &lt;em&gt;DP&lt;/em&gt; and &lt;em&gt;IP&lt;/em&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from time import time
import numpy as np
methods_names = [&amp;quot;IP&amp;quot;, &amp;quot;DP&amp;quot;]
methods = [solve_with_ip, solve_with_dp]
test_instances = np.arange(1000000, step=1000)
denominations = [1, 2, 5, 10]
logs = []
for name, method in zip(methods_names, methods):
    t_s1 = time()
    for CASH in test_instances:
        t_s = time()
        _ = method(denominations, CASH)
        logs.append({&amp;quot;Method&amp;quot;:name, &amp;quot;Test&amp;quot;:CASH, &amp;quot;Time&amp;quot;:time()-t_s})
    print(&amp;quot;%s finished all tests in %0.2f seconds!&amp;quot;%(name, time()-t_s1))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns;
import matplotlib.pyplot as plt
import matplotlib
%matplotlib inline
df = pd.DataFrame(logs)
fig = plt.figure(figsize=(16,5))
SMALL_SIZE = 18
matplotlib.rc(&#39;font&#39;, size=SMALL_SIZE)
matplotlib.rc(&#39;axes&#39;, titlesize=SMALL_SIZE)

sns.lineplot(x=&#39;Test&#39;, y=&#39;Time&#39;, hue=&#39;Method&#39;, data=df)
plt.xlabel(&amp;quot;Cash to be returned&amp;quot;)
plt.ylabel(&amp;quot;Time in seconds&amp;quot;)
plt.title(&amp;quot;Comparison of DP and IP Methods&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Aha!&lt;/p&gt;

&lt;p&gt;As we can see the roles have drastically changed.&lt;/p&gt;

&lt;p&gt;This is expected as the overall time needed for &lt;em&gt;DP&lt;/em&gt; based approach is along the lines of:&lt;/p&gt;

&lt;p&gt;Number-of-states $\times$ evaluation-time-per-state&lt;/p&gt;

&lt;p&gt;With constant evaluation time per state, as we increase the possible number of states (the value to be returned) we see a linear increase to the time needed.&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;em&gt;IP&lt;/em&gt; approach does not suffer from such issues. We see a constant time of $\approx0.04$ seconds regardless of the cash needed.&lt;/p&gt;

&lt;p&gt;This is to be expected as the only thing that changes in the optimization problem is the constant of the CASH needed for the second constraint. As such, the performance would be the same regardless of the value returned. Moreover, the solver &lt;a href=&#34;https://www.gnu.org/software/glpk/#TOCdocumentation&#34; target=&#34;_blank&#34;&gt;GNU Linear Programming Kit- GLPK&lt;/a&gt; used is very efficient in mixed integer programs.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So a few final words regarding this post.&lt;/p&gt;

&lt;p&gt;We visited the problem of Coin-Changing and formulated it as an &lt;em&gt;Integer Programming&lt;/em&gt; problem. We evaluated a solver on this problem, alongside some classic recursive and &lt;em&gt;dynamic programming&lt;/em&gt; procedures. Finally, we performed the two tests, on different scales of input to benchmark the approaches in a simple way.&lt;/p&gt;

&lt;p&gt;The analysis done here is by no means perfect. I am sure there are more efficient implementations for both the &lt;em&gt;IP&lt;/em&gt; and &lt;em&gt;DP&lt;/em&gt; approaches presented here, but this was more of a proof-of-concept and thought-provoking experimentation rather than a complete benchmark.&lt;/p&gt;

&lt;p&gt;I hope to have some more time to check the initial performance bump of the &lt;em&gt;IP&lt;/em&gt; method (for values of CASH &amp;lt; 200) that seems rather unnatural to me.&lt;/p&gt;

&lt;p&gt;As a &lt;em&gt;tl;dr closing remarks&lt;/em&gt; I would state the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;d like you could formulate the coin-change problem as an &lt;em&gt;IP&lt;/em&gt; problem. This is an approach I have not yet seen.&lt;/li&gt;
&lt;li&gt;Is it worth the effort? Firstly, the effort in terms of lines of code is not so big, as demonstrated. Secondly, regarding the results, if the coin-change machine in your workplace is expected to give out change in the scale of &amp;gt; 10000$, then it is crucial. If not, don&amp;rsquo;t bother with it.&lt;/li&gt;
&lt;li&gt;With regards to the interview itself, I think it would be interesting to see the reaction of the technical supervisor when presented with this approach. If it were me, I would give a (+) to the candidate for the originality of the idea though.&lt;/li&gt;
&lt;li&gt;Finally, as a note to self, do not forget to brush-up your knowledge on simple CS/Algo problems before heading in a technical interview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any comments or spot any mistakes/errors, feel free to contact me or leave a comment!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IASIS - Big Data to Support Precision Medicine and Public Health Policy</title>
      <link>https://kbogas.github.io/project/iasis/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/project/iasis/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://project-iasis.eu/&#34;&gt;Visit Project&amp;rsquo;s Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Precision medicine promises to transform the delivery of healthcare to patients. Healthcare is evolving from a reactive “one-size-fits-all” system towards a system of predictive, preventive, and precision care. A personalised medicine approach is expected to lead to better health outcomes, improved treatments, and reduction in toxicity due to variable or adverse drug responses.&lt;/p&gt;

&lt;p&gt;The goal of Project IASIS is to seize the opportunity provided by a wave of data heading our way and turn this into actionable information that would match the right treatment with the right type of patient. A current challenge is that there are large, heterogeneous sets of data ranging from different sources, which if combined would enable the best decisions to be made, allowing for diagnosis and treatment to be personalised to each individual. IASIS is testing this approach in two disease areas – lung cancer and Alzheimer’s disease – but with the longer-term ambition that this approach will be more widely applicable to other disease areas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic integration of disease-specific knowledge</title>
      <link>https://kbogas.github.io/publication/eccb2018/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/eccb2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Detection of Linguistic Indicators As a Means of Early Prediction of Alzheimer’s and of Related Dementias: A Cross Linguistics Analysis</title>
      <link>https://kbogas.github.io/publication/aaic2018/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/aaic2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://kbogas.github.io/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/privacy/</guid>
      <description>&lt;h1&gt;Privacy Policy for kbogas.github.io&lt;/h1&gt;

&lt;p&gt;At kbogas.github.io, accessible from kbogas.github.io, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by kbogas.github.io and how we use it.&lt;/p&gt;

&lt;p&gt;If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us through email at eystathios.gab@gmail.com&lt;/p&gt;

&lt;h2&gt;Log Files&lt;/h2&gt;

&lt;p&gt;kbogas.github.io follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services&#39; analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users&#39; movement on the website, and gathering demographic information.&lt;/p&gt;

&lt;h2&gt;Privacy Policies&lt;/h2&gt;

&lt;p&gt;&lt;P&gt;You may consult this list to find the Privacy Policy for each of the advertising partners of kbogas.github.io. Our Privacy Policy was created with the help of the &lt;a href=&#34;https://www.privacypolicygenerator.info&#34;&gt;Privacy Policy Generator&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on kbogas.github.io, which are sent directly to users&#39; browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.&lt;/p&gt;

&lt;p&gt;Note that kbogas.github.io has no access to or control over these cookies that are used by third-party advertisers.&lt;/p&gt;

&lt;h2&gt;Third Party Privacy Policies&lt;/h2&gt;

&lt;p&gt;kbogas.github.io&#39;s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. You may find a complete list of these Privacy Policies and their links here: Privacy Policy Links.&lt;/p&gt;

&lt;p&gt;You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers&#39; respective websites. What Are Cookies?&lt;/p&gt;

&lt;h2&gt;Children&#39;s Information&lt;/h2&gt;

&lt;p&gt;Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.&lt;/p&gt;

&lt;p&gt;kbogas.github.io does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.&lt;/p&gt;

&lt;h2&gt;Online Privacy Policy Only&lt;/h2&gt;

&lt;p&gt;This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in kbogas.github.io. This policy is not applicable to any information collected offline or via channels other than this website.&lt;/p&gt;

&lt;h2&gt;Consent&lt;/h2&gt;

&lt;p&gt;By using our website, you hereby consent to our Privacy Policy and agree to its Terms and Conditions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BioASQ - Large-scale biomedical semantic indexing and question answering competition</title>
      <link>https://kbogas.github.io/project/bioasq/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/project/bioasq/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://bioasq.org/&#34;&gt;Visit BioASQ Challenge Website&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;BioASQ organizes challenges on biomedical semantic indexing and question answering (QA). The challenges include tasks relevant to hierarchical text classification, machine learning, information retrieval, QA from texts and structured data, multi-document summarization and many other areas.&lt;/p&gt;

&lt;p&gt;The BioASQ challenge comprises the following tasks.&lt;/p&gt;

&lt;h3 id=&#34;bioasq-task-a-on-large-scale-online-biomedical-semantic-indexing&#34;&gt;BioASQ Task a on Large-Scale Online Biomedical Semantic Indexing&lt;/h3&gt;

&lt;p&gt;In this task, the participants are asked to classify new PubMed documents, before PubMed curators annotate (in effect, classify) them manually. The classes come from the MeSH hierarchy. As new manual annotations become available, they are used to evaluate the classification performance of participating systems.&lt;/p&gt;

&lt;h3 id=&#34;bioasq-task-b-on-biomedical-semantic-qa-involves-ir-qa-summarization-and-more&#34;&gt;BioASQ Task b on Biomedical Semantic QA (involves IR, QA, summarization and more)&lt;/h3&gt;

&lt;p&gt;This task uses benchmark datasets containing development and test questions, in English, along with gold standard (reference) answers constructed by a team of biomedical experts. The participants have to respond with relevant concepts, articles, snippets and RDF triples, from designated resources, as well as exact and &amp;lsquo;ideal&amp;rsquo; answers.&lt;/p&gt;

&lt;h3 id=&#34;bioasq-task-mesinesp-on-medical-semantic-indexing-in-spanish&#34;&gt;BioASQ Task MESINESP on Medical Semantic Indexing in Spanish&lt;/h3&gt;

&lt;p&gt;In this task, the participants are asked to classify new IBECS and LILACS documents, before curators annotate them manually. The classes come from the MeSH hierarchy through the DeCS vocabulary. As new manual annotations become available, they are used to evaluate the classification performance of participating systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World!</title>
      <link>https://kbogas.github.io/post/hello_world/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/post/hello_world/</guid>
      <description>&lt;p&gt;Just starting out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhanced movie content similarity based on textual, auditory and visual information</title>
      <link>https://kbogas.github.io/publication/bougiatiotis201886/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/bougiatiotis201886/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Results of the sixth edition of the BioASQ Challenge</title>
      <link>https://kbogas.github.io/publication/nentidis2018results/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/nentidis2018results/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Results of the fifth edition of the BioASQ Challenge</title>
      <link>https://kbogas.github.io/publication/nentidis2017results/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/nentidis2017results/</guid>
      <description></description>
    </item>
    
    <item>
      <title>REVEAL - Social Media Verification</title>
      <link>https://kbogas.github.io/project/reveal/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/project/reveal/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://revealproject.eu/&#34;&gt;Visit Projects Website&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;social-media-verification&#34;&gt;Social Media Verification&lt;/h1&gt;

&lt;p&gt;REVEAL aims to advance the necessary technologies for making a higher level analysis of social media possible. The project will enable users to reveal hidden ‘modalities’ such as reputation, influence or credibility of information.at this approach will be more widely applicable to other disease areas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Content Representation and Similarity of Movies based on Topic Extraction from Subtitles</title>
      <link>https://kbogas.github.io/publication/setn_bougiatiotisg16/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/setn_bougiatiotisg16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DuchenneMap</title>
      <link>https://kbogas.github.io/project/duchenemap/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/project/duchenemap/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.duchennemap.org/&#34;&gt;Visit DuchenneMap and join the cause!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Duchenne Map empowers DMD patients and families to make better healthcare decisions.&lt;/p&gt;

&lt;h3 id=&#34;finding-information-shouldn-t-be-hard&#34;&gt;Finding information shouldn’t be hard.&lt;/h3&gt;

&lt;p&gt;Find and structure specialised DMD healthcare in a way that’s best for you. Access disease specific up-to-date information. All in one place.&lt;/p&gt;

&lt;h3 id=&#34;personalised-healthcare-journey&#34;&gt;Personalised healthcare journey.&lt;/h3&gt;

&lt;p&gt;Create a personal healthcare journey by visualising options. Eliminate misinformation. Share knowledge and educate yourself.&lt;/p&gt;

&lt;h3 id=&#34;verified-dmd-information&#34;&gt;Verified DMD information.&lt;/h3&gt;

&lt;p&gt;Follow clinical trials and research projects through every stage. Direct contact with healthcare providers. Know where to find information to make healthcare decisions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An exploratory analysis of news trends on twitter</title>
      <link>https://kbogas.github.io/publication/nlpmj16/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://kbogas.github.io/publication/nlpmj16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HOBBIT - Holistic Benchmarking of Big Linked Data</title>
      <link>https://kbogas.github.io/project/hobbit/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0300</pubDate>
      
      <guid>https://kbogas.github.io/project/hobbit/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://project-hobbit.eu/&#34;&gt;Visit Project&amp;rsquo;s Website&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;holistic-benchmarking-of-big-linked-data&#34;&gt;Holistic Benchmarking of Big Linked Data&lt;/h1&gt;

&lt;p&gt;HOBBIT aims at abolishing the barriers in the adoption and deployment of Big Linked Data by European companies, by means of open benchmarking reports that allow them to assess the fitness of existing solutions for their purposes. These benchmarks are based on data that reflects reality and measures industry-relevant Key Performance Indicators (KPIs) with comparable results using standardized hardware.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
